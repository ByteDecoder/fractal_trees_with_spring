.TH "FractalTree.StationaryBranch" 3 "Thu Dec 15 2016" "Version 0.1" "Fractal Spring Tree Generator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FractalTree.StationaryBranch \- A stationary branch\&. Forces cannot be applied to it\&. It is a line drawn onscreen by rotating and scaling a sprite between a start and end point\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour, and \fBFractalTree\&.Branch\fP\&.
.PP
Inherited by \fBFractalTree\&.MovingBranchImpl\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBSetup\fP (\fBBranch\fP owner, Vector2 end, float thickness, Color \fBcolor\fP)"
.br
.RI "Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch\&. "
.ti -1c
.RI "virtual void \fBSetup\fP (\fBBranch\fP owner, Vector2 end, float thickness, Color \fBcolor\fP, bool autoMass)"
.br
.RI "Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch that has its mass autogenerated based on line width\&. "
.ti -1c
.RI "virtual void \fBSetup\fP (Vector2 start, Vector2 end, float thickness, Color \fBcolor\fP)"
.br
.RI "Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch\&. "
.ti -1c
.RI "virtual void \fBSetup\fP (Vector2 start, Vector2 end, float thickness, Color \fBcolor\fP, bool autoMass)"
.br
.RI "Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch that has its mass autogenerated based on line width\&. "
.ti -1c
.RI "T \fBDoBranching< T >\fP (float angle)"
.br
.RI "Returns a new branch based on current branch angle plus parameter angle\&. "
.ti -1c
.RI "void \fBDoColonizationReset\fP ()"
.br
.RI "Resets the colonization paramater\&. Used only for space colonization generation\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static float \fBLengthDegradation\fP = 0\&.67f"
.br
.RI "Used by the default tree algorithm\&. Each branchings length is multiplied by this value\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBAwake\fP ()"
.br
.ti -1c
.RI "void \fBUpdateSprite\fP ()"
.br
.RI "Updates the sprite position, rotation, and scale in relation to the start and point\&. "
.ti -1c
.RI "void \fBUpdateColor\fP (Color \fBcolor\fP)"
.br
.RI "Updates the sprite renderer color\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "float \fBm_Width\fP"
.br
.RI "The width of the branch\&. "
.ti -1c
.RI "SpriteRenderer \fBm_Renderer\fP"
.br
.RI "The renderer associated with the branch\&. "
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static readonly float \fBSPRITE_SIZE\fP = 100f / 100f"
.br
.RI "Pixels of line sprite / pixels per units\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "Vector2 \fBcolonizationDir\fP\fC [get, set]\fP"
.br
.RI "Gets or sets the colonization direction\&. Used for space colonization tree generation\&. Defines the direction of the next branch in relation to nearby leaves\&. "
.ti -1c
.RI "int \fBcolonizationLeafCount\fP\fC [get, set]\fP"
.br
.RI "Gets or sets the number of nearby colonizaion leaves\&. "
.ti -1c
.RI "virtual Vector2 \fBstartPos\fP\fC [get]\fP"
.br
.RI "Gets the start position\&. "
.ti -1c
.RI "virtual Vector2 \fBendPos\fP\fC [get]\fP"
.br
.RI "Gets the end position\&. "
.ti -1c
.RI "bool \fBhasBranched\fP\fC [get, set]\fP"
.br
.RI "Gets or sets a value indicating whether this \fBFractalTree\&.StationaryBranch\fP has branched\&. "
.ti -1c
.RI "Color \fBcolor\fP\fC [set]\fP"
.br
.RI "Sets the color of the branch sprite and updates the sprite renderer\&. "
.in -1c
.SH "Detailed Description"
.PP 
A stationary branch\&. Forces cannot be applied to it\&. It is a line drawn onscreen by rotating and scaling a sprite between a start and end point\&. 


.SH "Member Function Documentation"
.PP 
.SS "T FractalTree\&.StationaryBranch\&.DoBranching< T > (float angle)"

.PP
Returns a new branch based on current branch angle plus parameter angle\&. 
.PP
\fBReturns:\fP
.RS 4
The branching\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIangle\fP Angle\&.
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP The 1st type parameter\&.
.RE
.PP

.PP
Implements \fBFractalTree\&.Branch\fP\&.
.PP
\fBType Constraints\fP
.TP
\fIT\fP : \fIBranch\fP
.SS "void FractalTree\&.StationaryBranch\&.DoColonizationReset ()"

.PP
Resets the colonization paramater\&. Used only for space colonization generation\&. 
.PP
Implements \fBFractalTree\&.Branch\fP\&.
.SS "virtual void FractalTree\&.StationaryBranch\&.Setup (\fBBranch\fP owner, Vector2 end, float thickness, Color color)\fC [virtual]\fP"

.PP
Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch\&. 
.PP
\fBParameters:\fP
.RS 4
\fIowner\fP The attached branch\&.
.br
\fIend\fP End\&.
.br
\fIthickness\fP Thickness\&.
.br
\fIcolor\fP Color\&.
.RE
.PP

.PP
Implements \fBFractalTree\&.Branch\fP\&.
.PP
Reimplemented in \fBFractalTree\&.MovingBranchImpl\fP\&.
.SS "virtual void FractalTree\&.StationaryBranch\&.Setup (\fBBranch\fP owner, Vector2 end, float thickness, Color color, bool autoMass)\fC [virtual]\fP"

.PP
Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch that has its mass autogenerated based on line width\&. 
.PP
\fBParameters:\fP
.RS 4
\fIowner\fP Owner\&.
.br
\fIend\fP End\&.
.br
\fIthickness\fP Thickness\&.
.br
\fIcolor\fP Color\&.
.br
\fIautoMass\fP If set to \fCtrue\fP auto mass\&.
.RE
.PP

.PP
Implements \fBFractalTree\&.Branch\fP\&.
.PP
Reimplemented in \fBFractalTree\&.MovingBranchImpl\fP\&.
.SS "virtual void FractalTree\&.StationaryBranch\&.Setup (Vector2 start, Vector2 end, float thickness, Color color)\fC [virtual]\fP"

.PP
Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch\&. 
.PP
\fBParameters:\fP
.RS 4
\fIowner\fP The attached branch\&.
.br
\fIend\fP End\&.
.br
\fIthickness\fP Thickness\&.
.br
\fIcolor\fP Color\&.
.br
\fIstart\fP Start\&.
.RE
.PP

.PP
Implements \fBFractalTree\&.Branch\fP\&.
.PP
Reimplemented in \fBFractalTree\&.MovingBranchImpl\fP\&.
.SS "virtual void FractalTree\&.StationaryBranch\&.Setup (Vector2 start, Vector2 end, float thickness, Color color, bool autoMass)\fC [virtual]\fP"

.PP
Setup the specified owner, end, thickness and color\&. Used to create a branch that is attached to another branch that has its mass autogenerated based on line width\&. 
.PP
\fBParameters:\fP
.RS 4
\fIowner\fP Owner\&.
.br
\fIend\fP End\&.
.br
\fIthickness\fP Thickness\&.
.br
\fIcolor\fP Color\&.
.br
\fIstart\fP Start\&.
.br
\fIautoMass\fP If set to \fCtrue\fP auto mass\&.
.RE
.PP

.PP
Implements \fBFractalTree\&.Branch\fP\&.
.PP
Reimplemented in \fBFractalTree\&.MovingBranchImpl\fP\&.
.SS "void FractalTree\&.StationaryBranch\&.UpdateColor (Color color)\fC [protected]\fP"

.PP
Updates the sprite renderer color\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP Color\&.
.RE
.PP

.SS "void FractalTree\&.StationaryBranch\&.UpdateSprite ()\fC [protected]\fP"

.PP
Updates the sprite position, rotation, and scale in relation to the start and point\&. 
.SH "Member Data Documentation"
.PP 
.SS "float FractalTree\&.StationaryBranch\&.LengthDegradation = 0\&.67f\fC [static]\fP"

.PP
Used by the default tree algorithm\&. Each branchings length is multiplied by this value\&. 
.SS "SpriteRenderer FractalTree\&.StationaryBranch\&.m_Renderer\fC [protected]\fP"

.PP
The renderer associated with the branch\&. 
.SS "float FractalTree\&.StationaryBranch\&.m_Width\fC [protected]\fP"

.PP
The width of the branch\&. 
.SS "readonly float FractalTree\&.StationaryBranch\&.SPRITE_SIZE = 100f / 100f\fC [static]\fP, \fC [protected]\fP"

.PP
Pixels of line sprite / pixels per units\&. 
.SH "Property Documentation"
.PP 
.SS "Vector2 FractalTree\&.StationaryBranch\&.colonizationDir\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the colonization direction\&. Used for space colonization tree generation\&. Defines the direction of the next branch in relation to nearby leaves\&. The colonization dir\&.
.SS "int FractalTree\&.StationaryBranch\&.colonizationLeafCount\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets the number of nearby colonizaion leaves\&. The colonization leaf count\&.
.SS "Color FractalTree\&.StationaryBranch\&.color\fC [set]\fP"

.PP
Sets the color of the branch sprite and updates the sprite renderer\&. The color\&.
.SS "virtual Vector2 FractalTree\&.StationaryBranch\&.endPos\fC [get]\fP"

.PP
Gets the end position\&. The end position\&.
.SS "bool FractalTree\&.StationaryBranch\&.hasBranched\fC [get]\fP, \fC [set]\fP"

.PP
Gets or sets a value indicating whether this \fBFractalTree\&.StationaryBranch\fP has branched\&. \fCtrue\fP if has branched; otherwise, \fCfalse\fP\&.
.SS "virtual Vector2 FractalTree\&.StationaryBranch\&.startPos\fC [get]\fP"

.PP
Gets the start position\&. The start position\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Fractal Spring Tree Generator from the source code\&.
